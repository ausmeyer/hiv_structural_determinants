LoadFunctionLibrary ("CF3x4");

function BuildCodonFrequencies (obsF)
{
	if (!ModelMatrixDimension)
	{
		ModelMatrixDimension = 64;
		for (h = 0 ;h<64; h=h+1)
		{
			if (_Genetic_Code[h]==10)
			{
				ModelMatrixDimension = ModelMatrixDimension-1;
			}
		}
	}

	PIStop = 1.0;
	result = {ModelMatrixDimension,1};
	hshift = 0;

	for (h=0; h<64; h=h+1)
	{
		first = h$16;
		second = h%16$4;
		third = h%4;
		if (_Genetic_Code[h]==10) 
		{
			hshift = hshift+1;
			PIStop = PIStop-obsF[first][0]*obsF[second][1]*obsF[third][2];
			continue; 
		}
		result[h-hshift][0]=obsF[first][0]*obsF[second][1]*obsF[third][2];
	}
	return result*(1.0/PIStop);
}

/*------------------------------------------------------------------------*/

function ReportSite1 (siteI, siteM)
{
	fullSites[siteI][0] = doneSites[siteM][0];
	fullSites[siteI][1] = doneSites[siteM][1];
	fullSites[siteI][2] = doneSites[siteM][2];
	fullSites[siteI][3] = doneSites[siteM][3];

	fprintf (stdout, "Site ", Format(siteI+1,5,0)," dN/dS = ", Format(doneSites[siteM][0],12,5),
					 " Full Log(L) = ", Format(doneSites[siteM][3],12,5),
					 " LRT = ",Format(doneSites[siteM][1],12,5), 
					 " p-value = ",Format(doneSites[siteM][2],12,5));

	if (doneSites[siteM][2]<pValue)
	{
		if (fullSites[siteI][0]>1)
		{
			fprintf (stdout, " *P");
		}
		else
		{
			fprintf (stdout, " *N");
		}
		
	}
	fprintf (stdout, "\n");
	return 0;
}

/*------------------------------------------------------------------------*/

function ReportSite2 (siteI, siteM)
{
	fullSites[siteI][0] = doneSites[siteM][0];
	fullSites[siteI][1] = doneSites[siteM][1];
	fullSites[siteI][2] = doneSites[siteM][6];
	fullSites[siteI][3] = doneSites[siteM][2];
	fullSites[siteI][4] = doneSites[siteM][3];
	fullSites[siteI][5] = doneSites[siteM][4];
	fullSites[siteI][6] = doneSites[siteM][5];
	if (Columns (fullSites) > 7)
	{
		fullSites[siteI][7] = doneSites[siteM][7];	
	}


	fprintf (stdout, "| Codon: ", 		Format(siteI+1,4,0),
					 "| dN/dS: ", 		Format(fullSites[siteI][2],10,2),
					 "| dN: ", 			Format(fullSites[siteI][0],5,2),
					 "| dS: ", 			Format(fullSites[siteI][1],5,2),
					 "| dS(=dN): ",		Format(fullSites[siteI][3],5,2),
					 "| Log(L): ",		Format(fullSites[siteI][6],10,2),
					 "| LRT: ",			Format(fullSites[siteI][4],5,2),
					 "| p: ",			Format(fullSites[siteI][5],5,2));		

	if (Columns (fullSites) > 7)
	{
		fprintf (stdout, "| dN_other: ", 		Format(fullSites[siteI][7],5,2));
	}
					 
	if (fullSites[siteI][5]<pValue)
	{
		if (fullSites[siteI][0]>fullSites[siteI][1])
		{
			fprintf (stdout, " *P");
		}
		else
		{
			fprintf (stdout, " *N");
		}
	}
	fprintf (stdout, "\n");
	return 0;
}



/*------------------------------------------------------------------------*/

function ReportSite3 (siteI, siteM)
{
	fullSites[siteI][0] = doneSites[siteM][0];
	fullSites[siteI][1] = doneSites[siteM][1];
	fullSites[siteI][2] = doneSites[siteM][2];


	fprintf (stdout, "Site ", Format(siteI+1,4,0),
					 " dS = ", Format(fullSites[siteI][0],7,4),
					 " dN = ", Format(fullSites[siteI][1],7,4),
					 " Log(L) ",Format(fullSites[siteI][2],7,4),"\n");		
					 
	return 0;
}

/*------------------------------------------------------------------------*/

function ReceiveJobs1 (sendOrNot)
{
	MPIReceive (-1, fromNode, result_String);
	
	siteIndex = MPINodeState[fromNode-1][1];
	
	if (sendOrNot)
	{
		MPISend (fromNode,siteLikelihood);
		MPINodeState[fromNode-1][1] = siteCount;			
	}
	else
	{
		MPINodeState[fromNode-1][0] = 0;
		MPINodeState[fromNode-1][1] = -1;		
	}
	
	ExecuteCommands (result_String);
	
	siteMap = dupInfo[siteIndex];
	doneSites[siteMap][0] = dNdS;
	dNdS = 1;
	LFCompute (siteLikelihood,LF_START_COMPUTE);
	LFCompute (siteLikelihood,nullLF);
	LFCompute (siteLikelihood,LF_DONE_COMPUTE);
	

	doneSites[siteMap][1] = 2*(siteLikelihood_MLES[1][0]-nullLF);
	doneSites[siteMap][2] = (1-CChi2(doneSites[siteMap][1],1))/2;						
	doneSites[siteMap][3] = siteLikelihood_MLES[1][0];						
	
	dummy = ReportSite1 (siteIndex, siteMap);
	
	return fromNode-1;
}
/*------------------------------------------------------------------------*/

function ReportSiteMEME (siteI, siteM)
{
    // labels       = {{"omega1","omega2","weight1","weight2","Length_scaler","LRT","p-value","Full Log(L)"}};
	fullSites[siteI][0] = doneSites[siteM][0];
	fullSites[siteI][1] = doneSites[siteM][1];
	fullSites[siteI][2] = doneSites[siteM][2];
	fullSites[siteI][3] = 1-doneSites[siteM][2];
	fullSites[siteI][4] = doneSites[siteM][7];
	fullSites[siteI][5] = doneSites[siteM][3];
	fullSites[siteI][6] = doneSites[siteM][4];
	fullSites[siteI][7] = doneSites[siteM][5];
	


	fprintf (stdout, "| Codon: ", 		Format(siteI+1,4,0),
					 "| Omega1: ", 		Format(fullSites[siteI][0],10,2),
					 "| P(Omega1): ", 	Format(fullSites[siteI][2],5,2),
					 "| Omega2: ", 		Format(fullSites[siteI][1],10,2),
					 "| P(Omega1): ",	Format(fullSites[siteI][3],5,2),
					 "| Scaling: ",		Format(fullSites[siteI][4],10,2),
					 "| LRT: ",			Format(fullSites[siteI][5],6,2),
					 "| p: ",			Format(fullSites[siteI][6],5,2),		
					 "| Log(L): ",		Format(fullSites[siteI][7],5,2));		

	if (fullSites[siteI][6]<pValue)
	{
		if (fullSites[siteI][1]>1)
		{
			fprintf (stdout, " *P");
		}
	}
	fprintf (stdout, "\n");
	return 0;
}
/*------------------------------------------------------------------------*/

function ReceiveJobs4 (sendOrNot, nullAlt)
{
	MPIReceive (-1, fromNode, result_String);
	
	siteIndex = MPINodeState[fromNode-1][1];
	siteNA	  = MPINodeState[fromNode-1][2];
	
	if (sendOrNot)
	{
		MPISend (fromNode,siteLikelihood);
		MPINodeState[fromNode-1][1] = siteCount;			
		MPINodeState[fromNode-1][2] = nullAlt;			
	}
	else
	{
		MPINodeState[fromNode-1][0] = 0;
		MPINodeState[fromNode-1][1] = -1;		
	}
	
	siteMap = dupInfo[siteIndex];
	
	ExecuteCommands (result_String);
	
	if (siteNA)
	{
		doneSites[siteMap][0] = dNdS;
		doneSites[siteMap][1] = doneSites[siteMap][1]+2*siteLikelihood_MLES[1][0];
		doneSites[siteMap][3] = siteLikelihood_MLES[1][0];
	}
	else
	{
		doneSites[siteMap][1] = doneSites[siteMap][1]-2*siteLikelihood_MLES[1][0];	
	}

	if (doneSites[siteMap][2] == 0)
	{
		doneSites[siteMap][2] = -1;
	}
	else
	{
		if (doneSites[siteMap][2] == (-1))
		{
			doneSites[siteMap][2] = 1-CChi2(doneSites[siteMap][1],1);						
			dummy = ReportSite1 (siteIndex, siteMap);
		}
	}
	
	return fromNode-1;
}

/*------------------------------------------------------------------------*/

function ReceiveJobs2 (sendOrNot, nullAlt)
{
	MPIReceive (-1, fromNode, result_String);
	
	siteIndex = MPINodeState[fromNode-1][1];
	siteNA	  = MPINodeState[fromNode-1][2];
	
	if (sendOrNot)
	{
		MPISend (fromNode,siteLikelihood);
		MPINodeState[fromNode-1][1] = siteCount;			
		MPINodeState[fromNode-1][2] = nullAlt;			
		MPINodeState[fromNode-1][3] = MPINodeState[fromNode-1][3]+1;			
	}
	else
	{
		MPINodeState[fromNode-1][0] = 0;
		MPINodeState[fromNode-1][1] = -1;		
	}
	
	siteMap = dupInfo[siteIndex];
		
	ExecuteCommands (result_String);
	
	nFValue = siteLikelihood_MLE_VALUES ["nFactor"];
	sFValue = siteLikelihood_MLE_VALUES ["sFactor"];
	if (Columns (doneSites) > 7)
	{
		noFValue = siteLikelihood_MLE_VALUES ["nFactorOther"];
	}
	
	if (siteNA)
	{
		doneSites[siteMap][0] = nFValue;
		doneSites[siteMap][1] = sFValue;
		if (Columns (doneSites) > 7)
		{
			doneSites[siteMap][7] = noFValue;
		}
		
			/*if ((sFactor > 1e-10) || (nFactor > 1e-10))
			{
				svpc = COVARIANCE_PRECISION;
				COVARIANCE_PRECISION = -1;
				if (sFactor < 1e-10 && nFactor > 1e-10)
				{
					global inverseRatioEstimator = 0;
					sFactor := inverseRatioEstimator*nFactor;
					COVARIANCE_PARAMETER = "inverseRatioEstimator";
					CovarianceMatrix (covMx,siteLikelihood);
					sFactor = doneSites[siteMap][1];
					doneSites[siteMap][6] = 1/covMx[0][2];
				}
				else
				{
					if (sFactor > 1e-10 && nFactor < 1e-10)
					{
						global inverseRatioEstimator = 0;
						nFactor := inverseRatioEstimator*sFactor;
						COVARIANCE_PARAMETER = "inverseRatioEstimator";
						CovarianceMatrix (covMx,siteLikelihood);
						nFactor = doneSites[siteMap][0];
						doneSites[siteMap][6] = 1/covMx[0][2];
					}
					else
					{
						global inverseRatioEstimator = nFactor/sFactor;
						nFactor := inverseRatioEstimator*sFactor;
						COVARIANCE_PARAMETER = "inverseRatioEstimator";
						CovarianceMatrix (covMx,siteLikelihood);
						nFactor = doneSites[siteMap][0];
						if (nFactor>sFactor)
						{
							doneSites[siteMap][6] = covMx[0][0];
						}
						else
						{
							doneSites[siteMap][6] = 1/covMx[0][2];					
						}
					}
				}
				COVARIANCE_PRECISION = svpc;
			}
			else
			{
				doneSites[siteMap][6] = 0;
			}*/
			
		doneSites[siteMap][6] = nFValue/sFValue;
		doneSites[siteMap][3] = doneSites[siteMap][3]+2*siteLikelihood_MLES[1][0];
		doneSites[siteMap][5] = siteLikelihood_MLES[1][0];
	}
	else
	{
		doneSites[siteMap][3] = doneSites[siteMap][3]-2*siteLikelihood_MLES[1][0];	
		doneSites[siteMap][2] = sFValue;
	}

	if (doneSites[siteMap][4] == 0)
	{
		doneSites[siteMap][4] = -1;
	}
	else
	{
		if (doneSites[siteMap][4] == (-1))
		{
			doneSites[siteMap][4] = 1-CChi2(doneSites[siteMap][3],1);						
			dummy = ReportSite2 (siteIndex, siteMap);
		}
	}
	
	return fromNode-1;
}

/*------------------------------------------------------------------------*/

function ReceiveJobsMEME (sendOrNot, nullAlt)
{
	MPIReceive (-1, fromNode, result_String);
	
	siteIndex = MPINodeState[fromNode-1][1];
	siteNA	  = MPINodeState[fromNode-1][2];
	
	if (sendOrNot)
	{
		MPISend (fromNode,siteLikelihood);
		MPINodeState[fromNode-1][1] = siteCount;			
		MPINodeState[fromNode-1][2] = nullAlt;			
		MPINodeState[fromNode-1][3] = MPINodeState[fromNode-1][3]+1;			
	}
	else
	{
		MPINodeState[fromNode-1][0] = 0;
		MPINodeState[fromNode-1][1] = -1;		
	}
	
	siteMap = dupInfo[siteIndex];
		
	ExecuteCommands (result_String);
	
	omega1F = siteLikelihood_MLE_VALUES ["omega1"];
	omega2F = siteLikelihood_MLE_VALUES ["omega2"];
	mixingF = siteLikelihood_MLE_VALUES ["mixingP"];
	sFValue = siteLikelihood_MLE_VALUES ["sFactor"]^4;
	
	if (siteNA) // alternative
	{
        doneSites[siteMap][0] = omega1F;
        doneSites[siteMap][1] = omega2F;
        doneSites[siteMap][2] = mixingF;
        doneSites[siteMap][6] = 1-mixingF;                                        
        doneSites[siteMap][7] = sFValue;
		
		doneSites[siteMap][3] = doneSites[siteMap][3]+2*siteLikelihood_MLES[1][0];
		doneSites[siteMap][5] = siteLikelihood_MLES[1][0];
	}
	else // NULL
	{
		doneSites[siteMap][3] = doneSites[siteMap][3]-2*siteLikelihood_MLES[1][0];	
	}

	if (doneSites[siteMap][4] == 0)
	{
		doneSites[siteMap][4] = -1;
	}
	else
	{
		if (doneSites[siteMap][4] == (-1))
		{
			doneSites[siteMap][4] = 1-CChi2(doneSites[siteMap][3],1);						
			ReportSiteMEME (siteIndex, siteMap);
		}
	}
	
	return fromNode-1;
}

/*------------------------------------------------------------------------*/

function ReceiveJobs3 (sendOrNot)
{
	MPIReceive (-1, fromNode, result_String);
	
	siteIndex = MPINodeState[fromNode-1][1];
	
	if (sendOrNot)
	{
		MPISend (fromNode,siteLikelihood);
		MPINodeState[fromNode-1][1] = siteCount;			
	}
	else
	{
		MPINodeState[fromNode-1][0] = 0;
		MPINodeState[fromNode-1][1] = -1;		
	}
	
	siteMap = dupInfo[siteIndex];
	
	ExecuteCommands (result_String);
	
	doneSites[siteMap][0] = sFactor;
	doneSites[siteMap][1] = nFactor;
	doneSites[siteMap][2] = siteLikelihood_MLES[1][0];

	ReportSite3 (siteIndex, siteMap);
	
	return fromNode-1;
}

/*------------------------------------------------------------------------*/

_DO_TREE_REBALANCE_ = 1;


if (pipeThroughFlag == 0)
{
	#include   "chooseGeneticCode.def";
	ChoiceList (nrChoice, "New/Restore",1,SKIP_NONE,
				"New Analysis","Perform a new analysis.",
				"Restore", "Restore an earlier nucleotide fit");
				
	if (nrChoice < 0)
	{
		return;
	}
}

global AC 	= 1;
global AT 	= 1;
global CG 	= 1;
global CT 	= 1;
global GT 	= 1;
global dNdS = 1;		

NucleotideMatrix	 = {{*,AC*t,t,AT*t}{AC*t,*,CG*t,CT*t}{t,CG*t,*,GT*t}{AT*t,CT*t,GT*t,*}};

if (nrChoice == 0)
{
	if (pipeThroughFlag == 0)
	{
		SetDialogPrompt ("Please specify a codon data file:");

		DataSet 	  ds 		= ReadDataFile (PROMPT_FOR_FILE);


		ChoiceList (modelChoice, "Model Options",1,SKIP_NONE,
					"Default","Use HKY85 and MG94xHKY85.",
					"Custom", "Use any reversible nucleotide model crossed with MG94.");
					
		if (modelChoice < 0)
		{
			return;
		}

		modelDesc = "";

		if (modelChoice)
		{
			done = 0;
			while (!done)
			{
				fprintf (stdout,"\nPlease enter a 6 character model designation (e.g:010010 defines HKY85):");
				fscanf  (stdin,"String", modelDesc);
				if (Abs(modelDesc)==6)
				{	
					done = 1;
				}
			}			
		}
		else
		{
			modelDesc = "010010";
		}
	}

	DataSetFilter filteredData = CreateFilter (ds,3,"","",GeneticCodeExclusions);
	DataSetFilter nucData 	= CreateFilter (filteredData,1);
	
	ModelTitle = ""+modelDesc[0];
				
	rateBiasTerms = {{"AC","1","AT","CG","CT","GT"}};
	paramCount	  = 0;

	modelConstraintString = "";

	for (customLoopCounter2=1; customLoopCounter2<6; customLoopCounter2=customLoopCounter2+1)
	{
		for (customLoopCounter=0; customLoopCounter<customLoopCounter2; customLoopCounter=customLoopCounter+1)
		{
			if (modelDesc[customLoopCounter2]==modelDesc[customLoopCounter])
			{
				ModelTitle  = ModelTitle+modelDesc[customLoopCounter2];	
				if (rateBiasTerms[customLoopCounter2] == "1")
				{
					modelConstraintString = modelConstraintString + rateBiasTerms[customLoopCounter]+":="+rateBiasTerms[customLoopCounter2]+";";
				}
				else
				{
					modelConstraintString = modelConstraintString + rateBiasTerms[customLoopCounter2]+":="+rateBiasTerms[customLoopCounter]+";";			
				}
				break;
			}
		}
		if (customLoopCounter==customLoopCounter2)
		{
			ModelTitle = ModelTitle+modelDesc[customLoopCounter2];	
		}
	}	

	if (Abs(modelConstraintString))
	{
		ExecuteCommands (modelConstraintString);
	}


	HarvestFrequencies (overallFrequencies,  nucData,1,1,0);
	HarvestFrequencies (rawPositionFrequencies, nucData,3,1,1);
    
    positionFrequencies = CF3x4 (rawPositionFrequencies, GeneticCodeExclusions);
	codonFrequencies    = BuildCodonFrequencies(positionFrequencies);

	Model NucModel = (NucleotideMatrix, overallFrequencies, 1);

	
	if (pipeThroughFlag == 0)
	{
		#include	 "queryTree.bf";
		SetDialogPrompt ("Save nucleotide model fit to:");
		fprintf (PROMPT_FOR_FILE, CLEAR_FILE);
		NUC_FILE_PATH = LAST_FILE_PATH;
	}
	else
	{
		Tree givenTree = treeString;
	}
}
else
{
	if (pipeThroughFlag == 0)
	{
		SetDialogPrompt ("Restore nucleotide fit from:");
		fscanf (PROMPT_FOR_FILE, "Raw", a);
		ExecuteCommands (a);
		DataSetFilter filteredData = CreateFilter (ds,3,"","",GeneticCodeExclusions);
		HarvestFrequencies (positionFrequencies, nucData,3,1,1);
		codonFrequencies = BuildCodonFrequencies(positionFrequencies);
		
		treeString = ""+givenTree;
		
		pMatch = {6,1};
		pCheck = {{AC__,AT__,CG__,CT__,GT__}};
		if (pCheck[0] == 1)
		{
			ModelTitle = "00";
			pCount = 1;
			pMatch[0] = 1;
		}
		else
		{
			pCount = 2;
			ModelTitle = "01";
			pMatch[0] = pCheck[0];
			pMatch[1] = 1;	
		}
		
		for (l=1; l<5; l=l+1)
		{	
			for (k=0; k<pCount; k=k+1)
			{
				if (pCheck[l] == pMatch[k])
				{
					break;
				}
			}
			
			if (k<pCount)
			{
				ModelTitle = ModelTitle + k;
			}
			else
			{
				pMatch[pCount] = pCheck[l];
				ModelTitle = ModelTitle + pCount;
				pCount = pCount+1;			
			}
		}
	}
}

